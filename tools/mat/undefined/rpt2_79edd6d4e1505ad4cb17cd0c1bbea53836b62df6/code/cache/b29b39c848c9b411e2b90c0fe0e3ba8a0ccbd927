{"code":"import Vector from './Vector';\r\nexport default class Matrix {\r\n    twoDimArray;\r\n    constructor(twoDimArray) {\r\n        this.twoDimArray = twoDimArray;\r\n    }\r\n    shape() {\r\n        return [this.twoDimArray.length, this.twoDimArray[0].length];\r\n    }\r\n    getRowNum() {\r\n        return this.shape()[0];\r\n    }\r\n    getColNum() {\r\n        return this.shape()[1];\r\n    }\r\n    size() {\r\n        const shape = this.shape();\r\n        return shape[0] * shape[1];\r\n    }\r\n    len = () => this.getRowNum();\r\n    rowVector(index) {\r\n        return new Vector(this.twoDimArray[index]);\r\n    }\r\n    colVector(index) {\r\n        const finalList = [];\r\n        for (let i = 0; i < this.getRowNum(); i++) {\r\n            const row = this.twoDimArray[i];\r\n            finalList.push(row[index]);\r\n        }\r\n        return new Vector(finalList);\r\n    }\r\n    getItem(position) {\r\n        return this.twoDimArray[position[0]][position[1]];\r\n    }\r\n    add(another) {\r\n        if (this.size() === another.size()) {\r\n            const finalList = [];\r\n            for (let i = 0; i < this.getRowNum(); i++) {\r\n                const row = [];\r\n                for (let j = 0; j < this.getColNum(); j++) {\r\n                    row.push(this.getItem([i, j]) + another.getItem([i, j]));\r\n                }\r\n                finalList.push(row);\r\n            }\r\n            return new Matrix(finalList);\r\n        }\r\n        else {\r\n            console.log('矩阵相加，其大小必须相等');\r\n        }\r\n    }\r\n    sub(another) {\r\n        if (this.size() === another.size()) {\r\n            const finalList = [];\r\n            for (let i = 0; i < this.getRowNum(); i++) {\r\n                const row = [];\r\n                for (let j = 0; j < this.getColNum(); j++) {\r\n                    row.push(this.getItem([i, j]) - another.getItem([i, j]));\r\n                }\r\n                finalList.push(row);\r\n            }\r\n            return new Matrix(finalList);\r\n        }\r\n        else {\r\n            console.log('矩阵相减，其大小必须相等');\r\n        }\r\n    }\r\n    mul(K) {\r\n        const finalList = [];\r\n        for (let i = 0; i < this.getRowNum(); i++) {\r\n            const row = [];\r\n            for (let j = 0; j < this.getColNum(); j++) {\r\n                row.push(this.getItem([i, j]) * K);\r\n            }\r\n            finalList.push(row);\r\n        }\r\n        return new Matrix(finalList);\r\n    }\r\n    division(K) {\r\n        return this.mul(1 / K);\r\n    }\r\n    static zero(r, c) {\r\n        const finalList = [];\r\n        for (let i = 0; i < r; i++) {\r\n            const row = [];\r\n            for (let j = 0; j < c; j++) {\r\n                row.push(0);\r\n            }\r\n            finalList.push(row);\r\n        }\r\n        return new Matrix(finalList);\r\n    }\r\n    mulVector(vector) {\r\n        if (vector.len === this.getColNum()) {\r\n            const finalList = [];\r\n            for (let i = 0; i < this.getRowNum(); i++) {\r\n                finalList.push(this.rowVector(i).dotMul(vector));\r\n            }\r\n            return new Vector(finalList);\r\n        }\r\n        else {\r\n            console.log('矩阵与向量相乘时，矩阵的列数必须与向量的长度相等');\r\n        }\r\n    }\r\n    mulMatrix(matrix) {\r\n        if (this.getColNum() === matrix.getRowNum()) {\r\n            const finalList = [];\r\n            for (let i = 0; i < this.getRowNum(); i++) {\r\n                const resultList = [];\r\n                const rowVector = this.rowVector(i);\r\n                for (let j = 0; j < matrix.getColNum(); j++) {\r\n                    const colVector = matrix.colVector(j);\r\n                    resultList.push(rowVector.dotMul(colVector));\r\n                }\r\n                finalList.push(resultList);\r\n            }\r\n            return new Matrix(finalList);\r\n        }\r\n        else {\r\n            console.log('矩阵与矩阵相乘，其中一个矩阵的列数必须与另一个矩阵的行数相等');\r\n        }\r\n    }\r\n    pos() {\r\n        return this.mul(1);\r\n    }\r\n    neg() {\r\n        return this.mul(-1);\r\n    }\r\n    toStr() {\r\n        return `Matrix(${this.twoDimArray})`;\r\n    }\r\n}\r\n","references":["/Users/zhangjing/zhangjing/HighPerformanceTable/tools/mat/src/core/Vector.ts"]}
